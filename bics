#!/usr/bin/env bash
#
# bics - bash interactive configuration system
#
# Control bash plugins easily
#
# Author: Dave Eddy <dave@daveeddy.com>
# Date: 9/24/2013
# License: MIT

BICS_VERSION='v0.0.0'
BICS_SOURCED=()

# bics initialization function, called when bics is sourced
_() {
	local f
	for f in ~/.bics/plugins/*/*.bash; do
		[[ -f $f ]] || continue
		. "$f" && BICS_SOURCED=("${BICS_SOURCED[@]}" "${f/#$HOME\/.bics\/plugins\/}")
	done
}

# bics bash completion
_bics() {
	local cmd=${COMP_WORDS[1]}
	local word=${COMP_WORDS[COMP_CWORD]}
	local words=()

	case "$COMP_CWORD" in
		1)
			words=(init install remove list search available update upgrade version help);;
		*)
			local installed=()
			local f
			for f in ~/.bics/plugins/*; do
				[[ -d $f ]] || continue
				installed=("${f##*/}" "${installed[@]}")
			done

			case "$cmd" in
				remove|rm) words=("${installed[@]}");;
				update|up) words=("${installed[@]}");;
				help) words=("${installed[@]}");;
			esac
			;;
	esac

	local _word
	for _word in "${words[@]}"; do
		[[ $_word == "$word"* || -z $word ]] && COMPREPLY=("${COMPREPLY[@]}" "$_word")
	done
}

# check if being sourced, logic from
# https://github.com/lhunath/scripts/blob/master/bash/bashlib/bashlib
if (return 2>/dev/null); then
	alias bics=~/.bics/bics
	complete -F _bics bics
	_
	unset -f _
	return
fi

sourceurl='https://raw.githubusercontent.com/bahamas10/bics/master/bics'
wikiurl='https://raw.githubusercontent.com/wiki/bahamas10/bics/plugins.md'

# Limit the number of columns printed
limitcolumns() {
	if ! [[ -t 1 ]]; then
		# do nothing if the output is not a tty
		cat
		return $?
	fi
	local red=$(tput setaf 1)
	local reset=$(tput sgr0)
	local cols=$1
	cols=${cols:-$COLUMNS}
	cols=${cols:-$(tput cols)}
	cols=${cols:-80}
	awk "
	{
		if (length(\$0) > $cols)
			\$0 = substr(\$0, 0, $cols - 1) \"$red>$reset\";
		print \$0
	}"
}

usage() {
	cat <<-EOF
	usage: bics [command] [args...]
	($BICS_VERSION)

	example

	  bics init
	    -- install bics on this system, typically called as the oneliner from the readme

	  bics install <repo> [name]
	    -- install a bics plugin from a git repository

	  bics remove <name> ...
	    -- remove a bics plugin

	  bics list
	    -- list installed plugins

	  bics search <name>
	    -- search for plugins

	  bics available
	    -- show all avaliable bics plugins

	  bics update [name]
	    -- update 'name' via git pull on the local machine
	    -- if 'name' is not given, all plugins are updated

	  bics upgrade
	    -- update bics to the newest version from github

	  bics help [name]
	    -- show this message and exit
	    -- if 'name' is given, show that plugins readme in PAGER

	  bics version
	    -- print the version number of bics that is currently installed

	plugins

	  the official list of plugins used by 'search' and 'available'
	  https://github.com/bahamas10/bics/wiki/Plugins
	EOF
}

list() {
	local f
	for f in ~/.bics/plugins/*; do
		[[ -d $f ]] || continue
		echo "> ${f##*/}"
	done
}

init() {
	if [[ ! -d ~/.bics ]]; then
		mkdir -p ~/.bics/plugins/test-plugin
		echo '> ~/.bics created'

		echo '# add code here' > ~/.bics/plugins/test-plugin/test-plugin.bash
		echo 'this plugin does nothing' > ~/.bics/plugins/test-plugin/help.txt
		echo '> test-plugin created'
	fi

	upgrade || return $?

	cat <<-EOF

	= to get started =
	1. add '. ~/.bics/bics' to your .bashrc to load plugins
	2. run 'exec bash' to load bics
	3. run 'bics list' to view installed plugins and 'bics available' to show avaliable packages
	EOF
}

install_() {
	if [[ -z $1 ]]; then
		echo '> repository must not be blank' >&2
		return 1
	fi

	cd ~/.bics/plugins || return $?
	git clone "$@"
}

remove_() {
	if [[ -z $1 ]]; then
		echo '> must specify a plugin to remove' >&2
		return 1
	fi

	local yes=false
	local option
	while getopts y option; do
		case "$option" in
			y) yes=true;;
			*) return 1;;
		esac
	done
	shift "$((OPTIND - 1))"

	echo -n '> remove'
	printf ' "%s"' "$@"
	echo
	local ans=n
	if ! $yes; then
		read -p '> are you sure? [y/N]: ' ans
		[[ $ans == y ]] || return 1
	fi

	cd ~/.bics/plugins || return $?
	rm -r "$@"
}


search() {
	curl -sS "$wikiurl" | \
		awk '-F|' '$5 { printf("%15-s %-50s %-15s %-15s %s\n", $1, $3, $2, $4, $5) }' | \
		grep -i "$1" | \
		limitcolumns
}

update() {
	cd ~/.bics/plugins || return $?

	local ret=0
	local files=("$@")
	if ((${#files[@]} == 0)) ; then
		files=(*)
	fi

	local f
	for f in "${files[@]}"; do
		f=${f##*/}
		[[ -z $f ]] && continue
		if cd ~/.bics/plugins/"$f" 2>/dev/null; then
			echo "> updating plugin '$f'"
			git pull
		else
			echo "> error updating plugin '$f'" >&2
			((ret++))
		fi
	done

	return "$ret"
}

upgrade() {
	echo -n "> getting source from $sourceurl... "
	if curl -L -sS -o ~/.bics/bics.temp "$sourceurl"; then
		mv ~/.bics/bics.temp ~/.bics/bics
		chmod +x ~/.bics/bics
		echo 'done'
		echo "> bics $(~/.bics/bics -v) installed"
	else
		echo 'failed to fetch!!'
		return 1
	fi
}

help_() {
	if [[ -z $1 ]]; then
		usage
		return 0
	fi

	local name d f file ret=0
	for name in "$@"; do
		file=
		d=~/.bics/plugins/$name
		if [[ ! -d $d ]]; then
			echo "> plugin $name not found" >&2
			((ret++))
			continue
		fi

		for f in "$d"/{*.txt,*.md,readme,ReadMe,README}; do
			if [[ -f $f ]]; then
				file=$f
				break
			fi
		done

		if [[ -z $file ]]; then
			echo "> no documentation for $name found" >&2
			((ret++))
			continue
		fi

		${PAGER:-less} "$file"
	done

	return "$ret"
}

cmd=$1
shift
case "$cmd" in
	available|avail) search "";;
	init) init;;
	in|install) install_ "$@";;
	rm|remove) remove_ "$@";;
	list|ls) list "$@";;
	search|se|grep) search "$@";;
	update|up) update "$@";;
	upgrade|fug) upgrade "$@";;
	-h|help) help_ "$@";;
	-v|v|version) echo "$BICS_VERSION";;
	*) usage >&2; exit 1;;
esac
